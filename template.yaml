AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: An AWS Serverless Specification template describing your function.

Parameters:
  CicdBucket:
    Type: String
Resources:


  # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-api.html
  DefaultApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: live
      DefinitionBody:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            # Chemin vers la spec OpenAPI
            Location: !Sub "s3://${CicdBucket}/spec/api-spec.yaml"

  # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
  FindArticlesFunction:
    Type: AWS::Serverless::Function
    Properties:
      # Chemin du handler de la lambda
      Handler: src.handler.find_by_tag
      # Runtime utilisé pour l'exécution de la lambda
      Runtime: python3.7
      # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
      # Droits IAM affectés à la l'exécution de la lambda
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Table
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref DefaultApi
            Path: /articles
            Method: GET
      # Variables d'environnement
      Environment:
        Variables:
          TABLE_NAME: !Ref Table

  FindArticleFunction:
    Type: AWS::Serverless::Function
    Properties:
      # Chemin du handler de la lambda
      Handler: src.handler.find_by_uuid
      # Runtime utilisé pour l'exécution de la lambda
      Runtime: python3.7
      # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
      # Droits IAM affectés à la l'exécution de la lambda
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Table
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref DefaultApi
            Path: /articles/{article_id}
            Method: GET
      # Variables d'environnement
      Environment:
        Variables:
          TABLE_NAME: !Ref Table

  CreateArticleFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src.handler.create_article
      Runtime: python3.7
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Table
        - CloudWatchPutMetricPolicy: { }
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref DefaultApi
            Path: /articles
            Method: POST
      Environment:
        Variables:
          TABLE_NAME: !Ref Table

  DeleteArticleFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src.handler.delete_article
      Runtime: python3.7
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Table
        - CloudWatchPutMetricPolicy: { }
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref DefaultApi
            Path: /articles/{article_id}
            Method: DELETE
      Environment:
        Variables:
          TABLE_NAME: !Ref Table

  # AuthorizerFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     FunctionName: !Sub "musiclibrary-${StageName}-AuthorizerFunction"
  #     Handler: src.handler.authorizer
  #     Runtime: python3.7
  #     Policies:
  #       - CloudWatchPutMetricPolicy: { }

  IAMLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: my-lambda-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: cloudwatch-put-metric-data
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                - cloudwatch:*
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - dynamodb:*
                Resource: "*"
                Effect: Allow


  # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-simpletable.html
  # https://docs.aws.amazon.com/fr_fr/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html
  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "epiblog"
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true
        KMSMasterKeyId: arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012
      AttributeDefinitions:
        - AttributeName: uuid
          AttributeType: S
        - AttributeName: title
          AttributeType: S
        # - AttributeName: content
        #   AttributeType: S
        # - AttributeName: author
        #   AttributeType: S
        # - AttributeName: tags
        #   AttributeType: List<S>
        # - AttributeName: owner_id
        #   AttributeType: S 
      KeySchema:
        - AttributeName: uuid
          KeyType: HASH
        - AttributeName: title
          KeyType: RANGE
      # GlobalSecondaryIndexes:
      #   - IndexName: tag
      #     KeySchema:
      #       - AttributeName: tag
      #         KeyType: HASH
      #       - AttributeName: uuid
      #         KeyType: RANGE
      #     Projection:
      #       ProjectionType: ALL

  KmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Key for encrypting/decrypting data in my application
      KeyPolicy:
        Version: "2012-10-17"
        Id: epiblog-key
        Statement:
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
              AWS: 
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: "*"

          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: arn:aws:iam::769070036876:root
            Action: kms:*
            Resource: "*"