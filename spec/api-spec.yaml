openapi: "3.0.1"
info:
  version: "1"
  title: "Epiblog documentation"


servers:
  - url: "https://{api_id}.execute-api.eu-west-3.amazonaws.com/live"
    variables:
      api_id:
        default: api_id
        description: set api id

paths:
  /articles:
    post:
      summary: "Create an article"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Article"
      responses:
        201:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Article"
      security:
        - CognitoAuthorizer: [ ]
      x-amazon-apigateway-integration:
        type: aws
        responses:
          default:
            statusCode: 201
            headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              Access-Control-Allow-Methods: "'GET,POST,OPTIONS,DELETE,PUT'"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateArticleFunction.Arn}/invocations"
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy

    get:
      summary: "Find article by tag"
      parameters:
        - in: query
          name: tag
          required: false
          schema:
            type: string
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Article"
      security:
        - CognitoAuthorizer: [ ]
      x-amazon-apigateway-integration:
        type: aws
        responses:
          default:
            statusCode: 200
            headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              Access-Control-Allow-Methods: "'GET,POST,OPTIONS,DELETE,PUT'"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FindArticlesFunction.Arn}/invocations"
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
        
  /articles/{article_id}:
    get:
      summary: "Find article by article_id"
      parameters:
        - in: path
          name: article_id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Article"
      security:
        - CognitoAuthorizer: [ ]
      x-amazon-apigateway-integration:
        type: aws
        responses:
          default:
            statusCode: 200
            headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              Access-Control-Allow-Methods: "'GET,POST,OPTIONS,DELETE,PUT'"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FindArticleFunction.Arn}/invocations"
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
    delete:
      summary: "Delete an article"
      parameters:
        - in: path
          name: article_id
          required: true
          schema:
            type: string
      responses:
        204:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
        - CognitoAuthorizer: [ ]
      x-amazon-apigateway-integration:
        type: aws
        responses:
          default:
            statusCode: 204
            headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              Access-Control-Allow-Methods: "'GET,POST,OPTIONS,DELETE,PUT'"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteArticleFunction.Arn}/invocations"
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
        
  /articles/tags:
    get:
      summary: "Get every tags"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tag"
      security:
        - CognitoAuthorizer: [ ]
      x-amazon-apigateway-integration:
        type: aws
        responses:
          default:
            statusCode: 200
            headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              Access-Control-Allow-Methods: "'GET,POST,OPTIONS,DELETE,PUT'"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTagsFunction.Arn}/invocations"
        passthroughBehavior: when_no_match
        httpMethod: GET
        type: aws_proxy
        
  
components:
  schemas:
    Article:
      type: object
      properties:
        id:
          type: string
        author:
          type: string
        title:
          type: string
        genre:
          type: string
        date:
          type: string
    Tag:
      type: string
    Empty:
      type: object
      
securityDefinitions:
  sigv4:
    type: apiKey
    name: Authorization
    in: header
    x-amazon-apigateway-authtype: awsSigv4
  CognitoAuthorizer:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        type: cognito_user_pools
        providerARNs:
          - arn:aws:cognito-idp:eu-west-3:178526612952:userpool/eu-west-3_ZuhvJ3ydE
          

  authorizer:
    type: apiKey
    name: Authorization
    in: header
    x-amazon-apigateway-authtype: 'custom'
    x-amazon-apigateway-authorizer:
      type: token
      authorizerUri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AuthorizerFunction}/invocations


x-amazon-apigateway-request-validators:
  validate_request:
    validateRequestBody: true
    validateRequestParameters: true
